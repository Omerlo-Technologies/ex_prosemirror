searchNodes=[{"doc":"ExProsemirror is a helper for the ProseMirror rich-text editor inside of Phoenix.HTML.Form . The current version is in alpha and we don't guarantee it works as expected. EEx examples &lt; % = form_for @changeset , &quot;#&quot; , fn f -&gt; % &gt; &lt; % = prosemirror_input f , :title , marks : [ :em ] % &gt; &lt; % = prosemirror_input f , :body , marks : [ :strong , :em ] , blocks : [ :p , :h1 ] % &gt; &lt; % end % &gt; Currently we don't allow custom blocks / marks. You have to use marks and blocks defined by the lib ex_prosemirror. The following code sample will create a form with 2 fields: title and body . The title will expose italic marks only. The body will expose italic and strong marks plus paragraph and header 1. &lt; form for = &quot;article&quot; &gt; &lt; input type = &quot;hidden&quot; name = &quot;article[title_plain]&quot; &gt; &lt; div id = &quot;ProseMirrorTitleDiv&quot; &gt; &lt; / div &gt; &lt; input type = &quot;hidden&quot; name = &quot;article[body_plain]&quot; &gt; &lt; div id = &quot;ProseMirrorBodyDiv&quot; &gt; &lt; / div &gt; &lt; / form &gt; Ecto examples use ExProsemirror.Schema import Ecto.Changeset import ExProsemirror.Changeset schema &quot;article&quot; do prosemirror_field :title end def changeset ( struct_or_changeset , attrs \\\\ %{ } ) do struct_or_changeset |&gt; cast_prosemirror ( attrs , :title , required : true ) end To learn more, take a look at ExProsemirror.Schema and ExProsemirror.Changeset . Installation First, you need to add the dependency according to the following code: def deps do [ { :ex_prosemirror , git : &quot;https://github.com/Omerlo-Technologies/ex_prosemirror&quot; , tag : &quot;0.1.2&quot; } , ] end Then, you have to import ExProsemirror.HTML.Form in your views / liveviews This could be done directly in your AppWeb.ex in view/0 and/or live_view/0 . In recent phoenix versions, you could simply add the line in view_helper/0 . defp view_helpers do quote do use Phoenix.HTML import Phoenix.View import ExProsemirror.HTML.Form # &lt;--- this line import AppWeb.ErrorHelpers alias AppWeb.Router.Helpers , as : Routes end end Add the ex_prosemirror dependency to your package.json: { ... &quot;dependencies&quot;: { ... &quot;ex_prosemirror&quot;: &quot;file:../deps/ex_prosemirror&quot; } ... } Finally, set the json adapter that you prefer Jason or Poison . Optional: If you want to use default prosemirror css, you can import the css/prosemirror.css file. E.g @import &quot;~ex_prosemirror/css/prosemirror.css&quot;;","ref":"ExProsemirror.html","title":"ExProsemirror","type":"behaviour"},{"doc":"Import ExProsemirror.EctoHelper and add the behaviour of ExProsemirror. Options safe_parser defines if the protocole Pheonix.HTML.Safe should be defined by default. When true , it will use ExProsemirror.extract_simple_text/1 (default: true )","ref":"ExProsemirror.html#__using__/1","title":"ExProsemirror.__using__/1","type":"macro"},{"doc":"Extracts the text(s) value(s) without any text marks / blocks. Examples iex&gt; ExProsemirror . extract_simple_text ( % ExProsemirror.Paragraph { content : [ ...&gt; % ExProsemirror.Text { text : &quot;Hello&quot; } , ...&gt; % ExProsemirror.Text { text : &quot;World&quot; } ...&gt; ] } ) [ &quot;Hello&quot; , &quot;World&quot; ] iex&gt; ExProsemirror . extract_simple_text ( [ ...&gt; % ExProsemirror.Text { text : &quot;Hello&quot; } , ...&gt; % ExProsemirror.Text { text : &quot;World&quot; } ...&gt; ] ) [ &quot;Hello&quot; , &quot;World&quot; ] iex&gt; ExProsemirror . extract_simple_text ( % ExProsemirror.Text { text : &quot;Hello&quot; } ) &quot;Hello&quot;","ref":"ExProsemirror.html#extract_simple_text/1","title":"ExProsemirror.extract_simple_text/1","type":"function"},{"doc":"Override the default extract_simple_text/1 system for the module that implements the callback. Examples def extract_simple_text ( % __MODULE__ { text : text } ) , do : text","ref":"ExProsemirror.html#c:extract_simple_text/1","title":"ExProsemirror.extract_simple_text/1","type":"callback"},{"doc":"","ref":"ExProsemirror.html#safe_parser/1","title":"ExProsemirror.safe_parser/1","type":"function"},{"doc":"Module helper for Ecto.Changeset.","ref":"ExProsemirror.Changeset.html","title":"ExProsemirror.Changeset","type":"module"},{"doc":"Cast and validate data integrity for an ExProsemirror field type. Examples cast_prosemirror ( changeset , :title , required : true ) % Ecto.Changeset { } Options Same options as ( Ecto.Changeset.cast_embed/3 ]( https://hexdocs.pm/ecto/Ecto.Changeset.html#cast_embed/3).","ref":"ExProsemirror.Changeset.html#cast_prosemirror/4","title":"ExProsemirror.Changeset.cast_prosemirror/4","type":"function"},{"doc":"Validate a prosemirror field (return :__parent__ errors to the field itself). Examples # Where the changeset use a schema that use ExProsemirror for its `title` field. struct_or_changeset |&gt; Ecto.Changeset . cast ( %{ title : &quot;Invalid Json&quot; } , [ ] ) |&gt; validate_prosemirror ( changeset , :title , required : true ) % Ecto.Changeset { changes : %{ errors : [ title : &quot;Invalid json&quot; ] } }","ref":"ExProsemirror.Changeset.html#validate_prosemirror/2","title":"ExProsemirror.Changeset.validate_prosemirror/2","type":"function"},{"doc":"Form helpers to generate HTML fields required by ProseMirror. Using this component, ProseMirror will automatically be link to hidden input fields. These hidden inputs will be used by Phoenix.HTML.Form to send data to the backend. Live synchronization over LiveView is not currently supported. Options marks: mark tags to use defined in your ProseMirror config blocks: block tags to use defined in your ProseMirror config","ref":"ExProsemirror.HTML.Form.html","title":"ExProsemirror.HTML.Form","type":"module"},{"doc":"Generates the &lt;div&gt; that will be used by javascript to mount the ProseMirror component. Usage &lt; % = prosemirror_editor ( @form , :title ) % &gt; See ExProsemirror.HTML.Form for options","ref":"ExProsemirror.HTML.Form.html#prosemirror_editor/3","title":"ExProsemirror.HTML.Form.prosemirror_editor/3","type":"function"},{"doc":"Generates a hidden input field to store data for ProseMirror. Uses Phoenix.HTML.Form.html.hidden_input/3 under the hood. Usage &lt; % = prosemirror_hidden_input ( @form , :title ) % &gt;","ref":"ExProsemirror.HTML.Form.html#prosemirror_hidden_input/3","title":"ExProsemirror.HTML.Form.prosemirror_hidden_input/3","type":"function"},{"doc":"Generates inputs for ProseMirror. Usages &lt; % = prosemirror_input @form , :body , id : &quot;my-article-input&quot; % &gt; iex&gt; prosemirror_input(form, :body)","ref":"ExProsemirror.HTML.Form.html#prosemirror_input/3","title":"ExProsemirror.HTML.Form.prosemirror_input/3","type":"function"},{"doc":"Module helper for Ecto.Schema.","ref":"ExProsemirror.Schema.html","title":"ExProsemirror.Schema","type":"module"},{"doc":"Automatically import ExProsemirror.Schema functions helper. Examples use ExProsemirror.Schema","ref":"ExProsemirror.Schema.html#__using__/1","title":"ExProsemirror.Schema.__using__/1","type":"macro"},{"doc":"Helper to generate ExProsemirror ecto schema field. Examples schema &quot;my_schema&quot; do prosemirror_field :title end # produces field :title_plain , :string , virtual : true embeds_one :title , ExProsemirror.Schema","ref":"ExProsemirror.Schema.html#prosemirror_field/1","title":"ExProsemirror.Schema.prosemirror_field/1","type":"macro"},{"doc":"Ecto schema helper that defines multiples macro to use inside a Ecto.Schema. It help you to build custom blocks / marks for ExProsemirror . This module is automatically import if you use ExProsemirror .","ref":"ExProsemirror.SchemaHelper.html","title":"ExProsemirror.SchemaHelper","type":"module"},{"doc":"Cast prosemirror data struct. Examples struct_or_changeset |&gt; cast ( attrs , some_fields_to_cast ) |&gt; cast_prosemirror_fields ( )","ref":"ExProsemirror.SchemaHelper.html#cast_prosemirror_fields/1","title":"ExProsemirror.SchemaHelper.cast_prosemirror_fields/1","type":"function"},{"doc":"Add the PolymorphicField in your ecto schema. Examples Single element embedded_prosemirror_field ( [ text : ExProsemirror.Text ] , array : false ) # same as embedded_prosemirror_field ( [ text : ExProsemirror.Text ] ) Multiple elements embedded_prosemirror_field ( [ text : ExProsemirror.Text ] , array : true ) Options array : boolean The array option will configure PolymorphicEmbed automatically to be a list of your data OR a single element.","ref":"ExProsemirror.SchemaHelper.html#embedded_prosemirror_field/2","title":"ExProsemirror.SchemaHelper.embedded_prosemirror_field/2","type":"macro"}]